AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy 3 Identical Ubuntu EC2 Instances with containerd Installed

Parameters:
    InstanceCount:
        Type: Number
        Default: 3
        Description: Number of EC2 Instances to launch

    K8ClusterName:
        Type: String
        Default: "kcluster"
        Description: The Kubernetes cluster name used in hostnames and tags.

    AvailabilityZone:
        Type: String
        Default: "us-east-2a"
        AllowedValues:
        - "us-east-2a"
        - "us-east-2b"
        - "us-east-2c"
        Description: The availability zone where the instances should be launched.

    KubernetesVersion:
        Type: String
        Default: "v1.31"
        AllowedValues:
        - "v1.31"
        - "v1.30"
        - "v1.29"
        Description: Kubernetes Version


Resources:
    VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.0.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
            - Key: "K8ClusterName"
              Value: !Ref K8ClusterName

    InstanceSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Enable SSH access and Web"
            VpcId: !Ref VPC
            SecurityGroupIngress:
            - IpProtocol: "tcp"
              FromPort: 22
              ToPort: 22
              CidrIp: "0.0.0.0/0" # Open to all IPs; consider restricting this in production
            - IpProtocol: "tcp"
              FromPort: 80
              ToPort: 80
              CidrIp: "0.0.0.0/0" # Open to all IPs; consider restricting this in production
            - IpProtocol: "tcp"
              FromPort: 8080
              ToPort: 8080
              CidrIp: "0.0.0.0/0" # Open to all IPs; consider restricting this in production
            - IpProtocol: "tcp"
              FromPort: 443
              ToPort: 443
              CidrIp: "0.0.0.0/0" # Open to all IPs; consider restricting this in production
            - IpProtocol: "-1"
              FromPort: -1
              ToPort: -1
              CidrIp: "10.0.1.0/24"  # Local subnet
            - IpProtocol: "-1"
              FromPort: -1
              ToPort: -1
              CidrIp: "10.244.0.0/16"  # Local subnet
            Tags:
            - Key: "K8ClusterName"
              Value: !Ref K8ClusterName

    InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags:
                - Key: "K8ClusterName"
                  Value: !Ref K8ClusterName

    AttachGateway:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            VpcId: !Ref VPC
            InternetGatewayId: !Ref InternetGateway

    Subnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            VpcId: !Ref VPC
            CidrBlock: "10.0.1.0/24"
            MapPublicIpOnLaunch: true
            AvailabilityZone: !Ref AvailabilityZone
            Tags:
            - Key: "K8ClusterName"
              Value: !Ref K8ClusterName

    RouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref VPC
            Tags:
            - Key: "K8ClusterName"
              Value: !Ref K8ClusterName

    Route:
        Type: "AWS::EC2::Route"
        Properties:
            RouteTableId: !Ref RouteTable
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref InternetGateway

    SubnetRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            SubnetId: !Ref Subnet
            RouteTableId: !Ref RouteTable

    NFSServer:
        Type: AWS::EC2::Instance
        DependsOn: [InstanceSecurityGroup, Subnet]
        Properties:
            InstanceType: t2.micro
            ImageId: "ami-003932de22c285676" # Ubuntu Server 22.04
            KeyName: "mrobertson-pub-key"
            SecurityGroupIds:
                - !GetAtt InstanceSecurityGroup.GroupId
            SubnetId: !Ref Subnet 
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install -y nfs-server 
                    mkdir /nfs
                    chmod 777 /nfs
                    echo "/nfs *(rw,sync,no_subtree_check,no_root_squash)" >> /etc/exports
                    exportfs -arv
                    systemctl enable nfs-server
                    systemctl start nfs-server
                    systemctl restart nfs-server



    LaunchTemplate:
        Type: "AWS::EC2::LaunchTemplate"
        DependsOn: [NFSServer]
        Properties:
            LaunchTemplateData:
                InstanceType: "t2.medium"
                ImageId: "ami-003932de22c285676" # Ubuntu Server 22.04
                KeyName: "mrobertson-pub-key"
                SecurityGroupIds:
                    - !GetAtt InstanceSecurityGroup.GroupId
                UserData:
                    Fn::Base64: !Sub |
                        #!/bin/bash
                        # Update and install necessary packages
                        cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
                        overlay
                        br_netfilter
                        EOF

                        modprobe overlay
                        modprobe br_netfilter

                        sudo apt-get update
                        apt-get upgrade -y
                        sudo apt-get install -y nfs-common apt-transport-https ca-certificates curl software-properties-common gpg net-tools containerd jq git

                        #sudo install -m 0755 -d /etc/apt/keyrings
                        #sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
                        #sudo chmod a+r /etc/apt/keyrings/docker.asc

                        # Add the repository to Apt sources:
                        #echo \
                        #    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                        #    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                        #    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                        #sudo apt-get update
                        #sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

                        cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
                        net.bridge.bridge-nf-call-iptables = 1
                        net.bridge.bridge-nf-call-ip6tables = 1
                        net.ipv4.ip_forward = 1
                        EOF
                        sysctl --system # apply settings

                        # Configure containerd and start it
                        mkdir -p /etc/containerd
                        containerd config default | tee /etc/containerd/config.toml
                        sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
                        systemctl restart containerd

                        # Install kubeadm, kubelet, and kubectl
                        swapoff -a
                        # Remove the swap entry from /etc/fstab to make it permanent 
                        sudo sed -i '/ swap /d' /etc/fstab

                        curl -fsSL https://pkgs.k8s.io/core:/stable:/${KubernetesVersion}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
                        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/${KubernetesVersion}/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
                        sudo apt-get update
                        sudo apt-get install -y kubelet kubeadm kubectl
                        sudo apt-mark hold kubelet kubeadm kubectl
                        sudo systemctl enable --now kubelet

                        # Mount NFS filesystem
                        echo "${NFSServer.PrivateIp}" > /var/log/nfs_server_ip   
                        mkdir -p /mnt/nfs
                        echo "${NFSServer.PrivateIp}:/nfs /mnt/nfs nfs _netdev 0 0" >> /etc/fstab
                        mount -a
                        # Write hostname to NFS
                        echo $(hostname) > /mnt/nfs/$(hostname).node
                        echo $(hostname) > /mnt/nfs/$(hostname).temp

                        # Attempt to rename to master - only one node will succeed
                        mv -n /mnt/nfs/$(hostname).temp /mnt/nfs/master

                        MASTER=$(cat /mnt/nfs/master)

                        # Check if the current node is master
                        if [[ $MASTER -eq $(hostname) ]]; then
                            # Initialize Kubernetes master
                            echo "I am master" | tee /var/log/master
                            wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

                            kubeadm init --pod-network-cidr=10.244.0.0/16 | tee /var/log/kubeadm_init.log

                            # Extract the join command
                            cat var/log/kubeadm_init.log | grep "kubeadm join" -A 2 > /mnt/nfs/join

                            export KUBECONFIG=/etc/kubernetes/admin.conf

                            #install networking
                            kubectl apply -f kube-flannel.yml


                        else
                            echo "I am not master" | tee /var/log/master
                            # Non-master nodes wait until the join file is available
                            while [ ! -f /mnt/nfs/join ]; do sleep 10; done

                            # Join the cluster
                            bash /mnt/nfs/join
                        fi

                        
                        chmod 666 /etc/kubernetes/admin.conf
                        sudo -u ubuntu mkdir -p /home/ubuntu/.kube
                        sudo -u ubuntu cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
                        cd /home/ubuntu/
                        sudo -u ubuntu git clone https://github.com/sile16/pure-tools.git

                        sudo -u ubuntu echo "source <(kubectl completion bash)" >> /home/ubuntu/.bashrc
                        sudo -u ubuntu echo "alias k=kubectl" >> /home/ubuntu/.bashrc
                        sudo -u ubuntu echo "complete -o default -F __start_kubectl k" >> /home/ubuntu/.bashrc
                        

        
            TagSpecifications:
            - ResourceType: "launch-template"
              Tags:
                - Key: "K8ClusterName"
                  Value: !Ref K8ClusterName
                - Key: "NFSServerIP"
                  Value: !GetAtt NFSServer.PrivateIp

    AutoScalingGroup:
        Type: "AWS::AutoScaling::AutoScalingGroup"
        DependsOn: [LaunchTemplate]
        Properties:
            MinSize: !Ref InstanceCount
            MaxSize: !Ref InstanceCount
            DesiredCapacity: !Ref InstanceCount
            VPCZoneIdentifier:
            - !Ref Subnet
            LaunchTemplate:
                Version: "1"
                LaunchTemplateId: !GetAtt LaunchTemplate.LaunchTemplateId
            AvailabilityZones:
            - !Ref AvailabilityZone
            Tags:
            - Key: "K8ClusterName"
              Value: !Ref K8ClusterName
              PropagateAtLaunch: true


Outputs:
    InstanceSecurityGroupId:
        Description: "Security Group ID"
        Value: !GetAtt InstanceSecurityGroup.GroupId

    LaunchTemplateId:
        Description: "The Launch Template ID"
        Value: !GetAtt LaunchTemplate.LaunchTemplateId

    NFSServerIP:
        Description: "IP Address of the NFS Server"
        Value: !GetAtt NFSServer.PrivateIp

